@page "/avantages"
@using Blazored.LocalStorage
@using System.Text.Json.Nodes
@inject ISyncLocalStorageService localStorage
@inject NavigationManager NavManager
@if (localStorage.GetItem<string>("user_roles") == "Admin")
{
    @inject HttpClient Http

<div class="container align-items-center">
<h3>Avantages</h3>
        <MudButton class="btn btn-info" @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">Créer</MudButton>
        <MudTable Items="avantages" Hover="true" >
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Nom</MudTh>
                <MudTh>Senior ?</MudTh>
                <MudTh>Points</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.id</MudTd>
                <MudTd DataLabel="Nom">@context.libelle</MudTd>
                <MudTd DataLabel="Senior ?">@(context.categorie == 1 ? "Sénior" : context.categorie == 2 ? "Jeune" : "Les deux")</MudTd>
                <MudTd DataLabel="Points">@context.points</MudTd>
                <MudTd DataLabel="Actions">
                    <MudButton @onclick="() => delete(context.id)" Variant="Variant.Filled" Color="Color.Error">Supprimer</MudButton>
                    <MudButton @onclick="() => showEditForm(context)" Variant="Variant.Filled" Color="Color.Warning">Modifier</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>


        <MudDialog @bind-IsVisible="isVisible" Options="dialogOptions">
                <TitleContent>
                    <MudText Typo="Typo.h6">
                        @(isEdit ? "Modifier" : "Créer") un avantage
                    </MudText>
                </TitleContent>
            <DialogContent>
                <EditForm Model="avantageCreate" OnValidSubmit="@createAvantage">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <MudTextField Label="Libellé" T="string" @bind-Value="avantageCreate.libelle"/><br/>
                    <label>Catégorie</label>
                    <select @bind="avantageCreate.categorie" class="form-select">
                        <option value="0">Sénior et jeune</option>
                        <option value="1">Sénior</option>
                        <option value="2">Jeune</option>
                    </select>
                    <MudNumericField Label="Points" @bind-Value="avantageCreate.points"/>
                    <br>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@(isEdit ? "Modifier" : "Créer")</MudButton>
                    <MudButton OnClick="() => isVisible = false">Annuler</MudButton>
                </EditForm>
            </DialogContent>
        </MudDialog>
        </div>
}

@code {
    private bool isCreate;
    private bool isEdit;
    public bool isVisible;
    private Avantage avantageCreate;
    List<Avantage> avantages;
    private DialogOptions dialogOptions = new() { FullWidth = true };
    
    private void OpenDialog()
    {
        isVisible = true;
        isEdit = false;
        avantageCreate = new Avantage();
    }

    protected override async Task OnInitializedAsync()
    {
        if (localStorage.GetItem<string>("user_roles") == "Admin")
        {
            avantages = await Http.GetFromJsonAsync<List<Avantage>>("https://localhost:8000/avantages");
        }
        else
        {
            NavManager.NavigateTo("/Unauthorize");
        }
    }

    public async void delete(int idAvantage)
    {
        try
        {
            await Http.DeleteAsync("https://localhost:8000/delete-avantage/" + idAvantage);
            Avantage avantage1 = avantages.Find(x => x.id == idAvantage);
            int index = avantages.IndexOf(avantage1);
            avantages.RemoveAt(index);
        }
        catch( Exception e)
        {
            Console.Write(e);
            throw;
        }
    }

    public void showEditForm(Avantage avantage)
    {
        avantageCreate = avantage;
        isVisible = true;
        isEdit = true;
    }

    public async void createAvantage()
    {
        if (!isEdit)
        {
            Console.WriteLine("Coucou");
            Avantage a = new Avantage($"{this.avantageCreate.libelle}", Convert.ToInt16($"{this.avantageCreate.points}"), Convert.ToInt16($"{this.avantageCreate.categorie}"));
            HttpResponseMessage response = await Http.PostAsJsonAsync("https://localhost:8000/create-avantage", a);

            string responseBody = await response.Content.ReadAsStringAsync();
            var responseJson = JsonObject.Parse(responseBody);

            Avantage lastAvantage = new Avantage(responseJson["id"].GetValue<int>(), responseJson["libelle"].GetValue<string>(), responseJson["points"].GetValue<int>(), responseJson["categorie"].GetValue<int>());
            avantages.Add(lastAvantage);
        }
        else
        {
            Console.WriteLine("Coucou Pas Edit");
            Avantage edited = avantages.Find(x => x.id == Convert.ToInt16($"{this.avantageCreate.id}"));
            edited.libelle = $"{this.avantageCreate.libelle}";
            edited.categorie = Convert.ToInt16($"{this.avantageCreate.categorie}");
            edited.points = Convert.ToInt16($"{this.avantageCreate.points}");
            await Http.PutAsJsonAsync("https://localhost:8000/edit-avantage/" + edited.id, edited);
        }
        isVisible = false;
    }
}