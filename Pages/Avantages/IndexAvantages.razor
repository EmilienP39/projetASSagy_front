@page "/avantages"
@using Blazored.LocalStorage
@using System.Text.Json.Nodes
@inject ISyncLocalStorageService localStorage
@inject NavigationManager NavManager
@if (localStorage.GetItem<string>("user_roles") == "Admin")
{
    @inject HttpClient Http


<h3>Avantages</h3>
    <MudButton class="btn btn-info" @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">Créer</MudButton>

    <table class="table table-dark">
        <thead>
        <tr>
            <th>ID</th>
            <th>Nom</th>
            <th>Senior ?</th>
            <th>Cotisation Base</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>

        @foreach (Avantage avantage in avantages)
        {
            <tr>
                <td>@avantage.id</td>
                <td>@avantage.libelle</td>
                <td>@(avantage.categorie == 1 ? "Sénior" : avantage.categorie == 2 ? "Jeune" : "Les deux")</td>
                <td>@avantage.points</td>
                <td>
                    <button class="btn btn-danger" @onclick="() => delete(avantage.id)">Supprimer</button>
                    <button class="btn btn-warning" @onclick="() => showEditForm(avantage)">Modifier</button>
                </td>
            </tr>
        }

        </tbody>
    </table>


<MudDialog @bind-IsVisible="isVisible" Options="dialogOptions">
        <DialogContent>
                <EditForm Model="avantageCreate" OnValidSubmit="@createAvantage">
                    <MudTextField Label="Libellé" T="string" @bind-Value="avantageCreate.libelle"/><br/>
                    <label>Catégorie</label>
                    <select @bind="avantageCreate.categorie" class="form-select">
                        <option value="0">Sénior et jeune</option>
                        <option value="1">Sénior</option>
                        <option value="2">Jeune</option>
                    </select>
                    <MudNumericField Label="Points" @bind-Value="avantageCreate.points"/>
                </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => isVisible = false">Annuler</MudButton>
            @if (isEdit)
            {
                <MudButton @onclick="editAvantage">Modifier</MudButton>
            }
            else
            {
                <MudButton @onclick="createAvantage">Créer</MudButton>
            }
        </DialogActions>
    </MudDialog>
}

@code {
    private bool isCreate;
    private bool isEdit;
    public bool isVisible;
    private Avantage avantageCreate;
    List<Avantage> avantages;
    private DialogOptions dialogOptions = new() { FullWidth = true };
    
    private void OpenDialog()
    {
        isVisible = true;
        isEdit = false;
        avantageCreate = new Avantage();
    }

    protected override async Task OnInitializedAsync()
    {
        if (localStorage.GetItem<string>("user_roles") == "Admin")
        {
            avantages = await Http.GetFromJsonAsync<List<Avantage>>("https://localhost:8000/avantages");
        }
        else
        {
            NavManager.NavigateTo("/Unauthorize");
        }
    }

    public async void delete(int idAvantage)
    {
        try
        {
            await Http.DeleteAsync("https://localhost:8000/delete-avantage/" + idAvantage);
            Avantage avantage1 = avantages.Find(x => x.id == idAvantage);
            int index = avantages.IndexOf(avantage1);
            avantages.RemoveAt(index);
        }
        catch( Exception e)
        {
            Console.Write(e);
            throw;
        }
    }

    public void showEditForm(Avantage avantage)
    {
        avantageCreate = avantage;
        isVisible = true;
        isEdit = true;
    }

    public async void createAvantage()
    {
        Avantage a = new Avantage($"{this.avantageCreate.libelle}", Convert.ToInt16($"{this.avantageCreate.points}"), Convert.ToInt16($"{this.avantageCreate.categorie}"));
        HttpResponseMessage response = await Http.PostAsJsonAsync("https://localhost:8000/create-avantage", a);
        
        string responseBody = await response.Content.ReadAsStringAsync();
        var responseJson = JsonObject.Parse(responseBody);
        
        Avantage lastAvantage = new Avantage(responseJson["id"].GetValue<int>(), responseJson["libelle"].GetValue<string>(), responseJson["points"].GetValue<int>(), responseJson["categorie"].GetValue<int>());
        avantages.Add(lastAvantage);
        
        isVisible = false;
    }

    public async void editAvantage()
    {
        Avantage edited = avantages.Find(x => x.id == Convert.ToInt16($"{this.avantageCreate.id}"));
        edited.libelle = $"{this.avantageCreate.libelle}";
        edited.categorie = Convert.ToInt16($"{this.avantageCreate.categorie}");
        edited.points = Convert.ToInt16($"{this.avantageCreate.points}");
        await Http.PutAsJsonAsync("https://localhost:8000/edit-avantage/" + edited.id, edited);
        isVisible = false;
    }
    
}