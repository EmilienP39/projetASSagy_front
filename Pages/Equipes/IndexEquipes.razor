@page "/equipe"
@using Blazored.LocalStorage
@using System.Text.Json.Nodes
@inject ISyncLocalStorageService localStorage
@inject NavigationManager NavManager

@if (localStorage.GetItem<string>("user_roles") == "Admin")
{
    @inject HttpClient Http


    <h3>Equipe</h3>
    <MudButton class="btn btn-info" @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">Créer</MudButton>
    
    <MudDialog @bind-IsVisible="isVisible" Options="dialogOptions">
        <DialogContent>
         <EditForm Model="equipeCreate" OnValidSubmit="@createEquipe">
             <MudTextField Label="Nom" T="string" id="nom" @bind-Value="equipeCreate.nom" />
             <div>
                 <label for="isSenior">Sénior ?</label><br/>
                 <InputCheckbox id="isSenior" @bind-Value="equipeCreate.isSenior"/>
             </div>
             <MudNumericField Label="Cotisation base" T="double" id="cotisationBase" @bind-Value="equipeCreate.cotisationBase"/>
         </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => isVisible = false">Annuler</MudButton>
                    @if (isEdit)
                    {
                        <MudButton @onclick="editEquipe">Modifier</MudButton>
                    }
                    else
                    {
                        <MudButton @onclick="createEquipe">Créer</MudButton>
                    }
        </DialogActions>
    </MudDialog>

    <table class="table table-dark">
        <thead>
        <tr>
            <th>ID</th>
            <th>Nom</th>
            <th>Senior ?</th>
            <th>Cotisation Base</th>
            <th>Voir</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Equipe ekip in _equipes)
        {
            <tr>
                <td>@ekip.id</td>
                <td>@ekip.nom</td>
                <td><input type="checkbox" @bind="ekip.isSenior" disabled></td>
                <td>@ekip.cotisationBase</td>
                <td><button class="btn btn-info" @onclick="() => move(ekip.id)">Voir</button></td>
                <td>
                    <button class="btn btn-danger" @onclick="() => delete(ekip.id)">Supprimer</button>
                    <button class="btn btn-warning" @onclick="() => showEditForm(ekip)">Modifier</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    
}

@code {
    
    Equipe equipeCreate = new Equipe();
    private Boolean isCreate;
    private Boolean isEdit;
    private DialogOptions dialogOptions = new() { FullWidth = true };
    private Boolean isVisible;
    private void OpenDialog()
    {
        isVisible = true;
        isEdit = false;
        equipeCreate = new Equipe();
    }

    public List<Equipe>? _equipes;

    protected override async Task OnInitializedAsync()
    {
        if (localStorage.GetItem<string>("user_roles") == "Admin")
        {
            _equipes = await Http.GetFromJsonAsync<List<Equipe>>("https://localhost:8000/equipes");
        }
        else
        {
            NavManager.NavigateTo("/Unauthorize2");
        }

    }

    private async Task delete(int idEquipe)
    {
        try
        {
            await Http.DeleteAsync("https://localhost:8000/delete-equipe/" + idEquipe);
            Equipe equipe1 = _equipes.Find(x => x.id == idEquipe);
            int index = _equipes.IndexOf(equipe1);
            _equipes.RemoveAt(index);
        }
        catch( Exception e)
        {
            Console.Write(e);
            throw;
        }
    }

    private void move(int id)
    {
        NavManager.NavigateTo($"/ShowOneEquipe/{id}");
    }
    
    private void showEditForm(Equipe equipe)
    {
        equipeCreate = equipe;
        isVisible = true;
        isEdit = true;
    }

    private async void editEquipe()
    {
        Equipe edited = _equipes.Find(x => x.id == Convert.ToInt16($"{this.equipeCreate.id}"));
        edited.nom = $"{this.equipeCreate.nom}";
        edited.isSenior = Convert.ToBoolean($"{this.equipeCreate.isSenior}");
        edited.cotisationBase = Convert.ToDouble($"{this.equipeCreate.cotisationBase}");
        await Http.PutAsJsonAsync("https://localhost:8000/edit-equipe/" + edited.id, edited);
        isVisible = false;
    }

    public async void createEquipe()
    {
        HttpResponseMessage response = await Http.PostAsJsonAsync("https://localhost:8000/create-equipe", equipeCreate);
        
        string responseBody = await response.Content.ReadAsStringAsync();
        var responseJson = JsonObject.Parse(responseBody);
        
        Equipe lastEquipe = new Equipe(responseJson["id"].GetValue<int>(), responseJson["is_senior"].GetValue<Boolean>(), responseJson["nom"].GetValue<string>(), responseJson["cotisation_base"].GetValue<Double>());
        _equipes.Add(lastEquipe);
        isVisible = false;
    }
}
